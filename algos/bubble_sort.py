"""Demonstrates bubble sort."""

from typing import List, Optional

from sort_demo_helpers import print_sort_op_results


def bubble_sort(lst: List[int]) -> List[str]:
    """Returns a list of operations."""
    operations = []
    for i in range(len(lst)-1):
        indexes_to_iterate = len(lst)-i-1
        init_op = '\n\tI: List: {}; Starting iteration {}/{} (from index 0 to {})...'.format(lst, i+1, len(lst)-1, indexes_to_iterate)
        operations.append(init_op)
        for j in range(0, indexes_to_iterate):
            comp_op = '\t\tC: Comparing index {} (value {}) to neighbor index {} (value {})...'.format(
                j, lst[j], j+1, lst[j+1]
            )
            operations.append(comp_op)
            if lst[j] > lst[j+1]:
                switch_op = '\tW: Switching values for indexes {} and {}!'.format(j, j+1)
                operations.append(switch_op)
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return operations


def main(some_random_list: Optional[List[str]] = None):
    print_sort_op_results(bubble_sort, some_random_list)


if __name__ == '__main__':
    main()

"""
$ python3 algos/bubble_sort.py
Demonstrating bubble_sort...

        I: List: [8, 1, 5, 3, 9, 12, 6, 7, 3, 9]; Starting iteration 1/9 (from index 0 to 9)...
                C: Comparing index 0 (value 8) to neighbor index 1 (value 1)...
        W: Switching values for indexes 0 and 1!
                C: Comparing index 1 (value 8) to neighbor index 2 (value 5)...
        W: Switching values for indexes 1 and 2!
                C: Comparing index 2 (value 8) to neighbor index 3 (value 3)...
        W: Switching values for indexes 2 and 3!
                C: Comparing index 3 (value 8) to neighbor index 4 (value 9)...
                C: Comparing index 4 (value 9) to neighbor index 5 (value 12)...
                C: Comparing index 5 (value 12) to neighbor index 6 (value 6)...
        W: Switching values for indexes 5 and 6!
                C: Comparing index 6 (value 12) to neighbor index 7 (value 7)...
        W: Switching values for indexes 6 and 7!
                C: Comparing index 7 (value 12) to neighbor index 8 (value 3)...
        W: Switching values for indexes 7 and 8!
                C: Comparing index 8 (value 12) to neighbor index 9 (value 9)...
        W: Switching values for indexes 8 and 9!

        I: List: [1, 5, 3, 8, 9, 6, 7, 3, 9, 12]; Starting iteration 2/9 (from index 0 to 8)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 5)...
                C: Comparing index 1 (value 5) to neighbor index 2 (value 3)...
        W: Switching values for indexes 1 and 2!
                C: Comparing index 2 (value 5) to neighbor index 3 (value 8)...
                C: Comparing index 3 (value 8) to neighbor index 4 (value 9)...
                C: Comparing index 4 (value 9) to neighbor index 5 (value 6)...
        W: Switching values for indexes 4 and 5!
                C: Comparing index 5 (value 9) to neighbor index 6 (value 7)...
        W: Switching values for indexes 5 and 6!
                C: Comparing index 6 (value 9) to neighbor index 7 (value 3)...
        W: Switching values for indexes 6 and 7!
                C: Comparing index 7 (value 9) to neighbor index 8 (value 9)...

        I: List: [1, 3, 5, 8, 6, 7, 3, 9, 9, 12]; Starting iteration 3/9 (from index 0 to 7)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                C: Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                C: Comparing index 2 (value 5) to neighbor index 3 (value 8)...
                C: Comparing index 3 (value 8) to neighbor index 4 (value 6)...
        W: Switching values for indexes 3 and 4!
                C: Comparing index 4 (value 8) to neighbor index 5 (value 7)...
        W: Switching values for indexes 4 and 5!
                C: Comparing index 5 (value 8) to neighbor index 6 (value 3)...
        W: Switching values for indexes 5 and 6!
                C: Comparing index 6 (value 8) to neighbor index 7 (value 9)...

        I: List: [1, 3, 5, 6, 7, 3, 8, 9, 9, 12]; Starting iteration 4/9 (from index 0 to 6)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                C: Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                C: Comparing index 2 (value 5) to neighbor index 3 (value 6)...
                C: Comparing index 3 (value 6) to neighbor index 4 (value 7)...
                C: Comparing index 4 (value 7) to neighbor index 5 (value 3)...
        W: Switching values for indexes 4 and 5!
                C: Comparing index 5 (value 7) to neighbor index 6 (value 8)...

        I: List: [1, 3, 5, 6, 3, 7, 8, 9, 9, 12]; Starting iteration 5/9 (from index 0 to 5)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                C: Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                C: Comparing index 2 (value 5) to neighbor index 3 (value 6)...
                C: Comparing index 3 (value 6) to neighbor index 4 (value 3)...
        W: Switching values for indexes 3 and 4!
                C: Comparing index 4 (value 6) to neighbor index 5 (value 7)...

        I: List: [1, 3, 5, 3, 6, 7, 8, 9, 9, 12]; Starting iteration 6/9 (from index 0 to 4)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                C: Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                C: Comparing index 2 (value 5) to neighbor index 3 (value 3)...
        W: Switching values for indexes 2 and 3!
                C: Comparing index 3 (value 5) to neighbor index 4 (value 6)...

        I: List: [1, 3, 3, 5, 6, 7, 8, 9, 9, 12]; Starting iteration 7/9 (from index 0 to 3)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                C: Comparing index 1 (value 3) to neighbor index 2 (value 3)...
                C: Comparing index 2 (value 3) to neighbor index 3 (value 5)...

        I: List: [1, 3, 3, 5, 6, 7, 8, 9, 9, 12]; Starting iteration 8/9 (from index 0 to 2)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                C: Comparing index 1 (value 3) to neighbor index 2 (value 3)...

        I: List: [1, 3, 3, 5, 6, 7, 8, 9, 9, 12]; Starting iteration 9/9 (from index 0 to 1)...
                C: Comparing index 0 (value 1) to neighbor index 1 (value 3)...

Number of operations: 71
Operation counts: Counter({'C': 45, 'W': 17, 'I': 9})
[1, 3, 3, 5, 6, 7, 8, 9, 9, 12]
Implemented correctly? True
"""
