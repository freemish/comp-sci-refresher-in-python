"""Demonstrates bubble sort."""

from random import randint
from typing import List


def bubble_sort(lst: List[int]):
    for i in range(len(lst)-1):
        indexes_to_iterate = len(lst)-i-1
        print('\n\tList: {}; Starting iteration {}/{} (from index 0 to {})...'.format(lst, i+1, len(lst)-1, indexes_to_iterate))
        for j in range(0, indexes_to_iterate):
            print('\t\tComparing index {} (value {}) to neighbor index {} (value {})...'.format(
                j, lst[j], j+1, lst[j+1]
            ))
            if lst[j] > lst[j+1]:
                print('\tSwitching values for indexes {} and {}!'.format(j, j+1))
                lst[j], lst[j+1] = lst[j+1], lst[j]
    return lst


def main():
    print('Starting demonstration of bubble sort...')

    some_random_list = [8, 1, 5, 3, 9, 12, 6, 7, 3, 9]
    #some_random_list = [randint(1, 20) for _ in range(randint(5, 12))]
    sort_output = bubble_sort(list(some_random_list))
    print('\n{}\nBubble sort implemented correctly? {}'.format(sort_output, sorted(some_random_list) == sort_output))


if __name__ == '__main__':
    main()

"""
$ python3 algos/bubble_sort.py
Starting demonstration of bubble sort...

        List: [8, 1, 5, 3, 9, 12, 6, 7, 3, 9]; Starting iteration 1/9 (from index 0 to 9)...
                Comparing index 0 (value 8) to neighbor index 1 (value 1)...
        Switching values for indexes 0 and 1!
                Comparing index 1 (value 8) to neighbor index 2 (value 5)...
        Switching values for indexes 1 and 2!
                Comparing index 2 (value 8) to neighbor index 3 (value 3)...
        Switching values for indexes 2 and 3!
                Comparing index 3 (value 8) to neighbor index 4 (value 9)...
                Comparing index 4 (value 9) to neighbor index 5 (value 12)...
                Comparing index 5 (value 12) to neighbor index 6 (value 6)...
        Switching values for indexes 5 and 6!
                Comparing index 6 (value 12) to neighbor index 7 (value 7)...
        Switching values for indexes 6 and 7!
                Comparing index 7 (value 12) to neighbor index 8 (value 3)...
        Switching values for indexes 7 and 8!
                Comparing index 8 (value 12) to neighbor index 9 (value 9)...
        Switching values for indexes 8 and 9!

        List: [1, 5, 3, 8, 9, 6, 7, 3, 9, 12]; Starting iteration 2/9 (from index 0 to 8)...
                Comparing index 0 (value 1) to neighbor index 1 (value 5)...
                Comparing index 1 (value 5) to neighbor index 2 (value 3)...
        Switching values for indexes 1 and 2!
                Comparing index 2 (value 5) to neighbor index 3 (value 8)...
                Comparing index 3 (value 8) to neighbor index 4 (value 9)...
                Comparing index 4 (value 9) to neighbor index 5 (value 6)...
        Switching values for indexes 4 and 5!
                Comparing index 5 (value 9) to neighbor index 6 (value 7)...
        Switching values for indexes 5 and 6!
                Comparing index 6 (value 9) to neighbor index 7 (value 3)...
        Switching values for indexes 6 and 7!
                Comparing index 7 (value 9) to neighbor index 8 (value 9)...

        List: [1, 3, 5, 8, 6, 7, 3, 9, 9, 12]; Starting iteration 3/9 (from index 0 to 7)...
                Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                Comparing index 2 (value 5) to neighbor index 3 (value 8)...
                Comparing index 3 (value 8) to neighbor index 4 (value 6)...
        Switching values for indexes 3 and 4!
                Comparing index 4 (value 8) to neighbor index 5 (value 7)...
        Switching values for indexes 4 and 5!
                Comparing index 5 (value 8) to neighbor index 6 (value 3)...
        Switching values for indexes 5 and 6!
                Comparing index 6 (value 8) to neighbor index 7 (value 9)...

        List: [1, 3, 5, 6, 7, 3, 8, 9, 9, 12]; Starting iteration 4/9 (from index 0 to 6)...
                Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                Comparing index 2 (value 5) to neighbor index 3 (value 6)...
                Comparing index 3 (value 6) to neighbor index 4 (value 7)...
                Comparing index 4 (value 7) to neighbor index 5 (value 3)...
        Switching values for indexes 4 and 5!
                Comparing index 5 (value 7) to neighbor index 6 (value 8)...

        List: [1, 3, 5, 6, 3, 7, 8, 9, 9, 12]; Starting iteration 5/9 (from index 0 to 5)...
                Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                Comparing index 2 (value 5) to neighbor index 3 (value 6)...
                Comparing index 3 (value 6) to neighbor index 4 (value 3)...
        Switching values for indexes 3 and 4!
                Comparing index 4 (value 6) to neighbor index 5 (value 7)...

        List: [1, 3, 5, 3, 6, 7, 8, 9, 9, 12]; Starting iteration 6/9 (from index 0 to 4)...
                Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                Comparing index 1 (value 3) to neighbor index 2 (value 5)...
                Comparing index 2 (value 5) to neighbor index 3 (value 3)...
        Switching values for indexes 2 and 3!
                Comparing index 3 (value 5) to neighbor index 4 (value 6)...

        List: [1, 3, 3, 5, 6, 7, 8, 9, 9, 12]; Starting iteration 7/9 (from index 0 to 3)...
                Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                Comparing index 1 (value 3) to neighbor index 2 (value 3)...
                Comparing index 2 (value 3) to neighbor index 3 (value 5)...

        List: [1, 3, 3, 5, 6, 7, 8, 9, 9, 12]; Starting iteration 8/9 (from index 0 to 2)...
                Comparing index 0 (value 1) to neighbor index 1 (value 3)...
                Comparing index 1 (value 3) to neighbor index 2 (value 3)...

        List: [1, 3, 3, 5, 6, 7, 8, 9, 9, 12]; Starting iteration 9/9 (from index 0 to 1)...
                Comparing index 0 (value 1) to neighbor index 1 (value 3)...

[1, 3, 3, 5, 6, 7, 8, 9, 9, 12]
Bubble sort implemented correctly? True
"""
