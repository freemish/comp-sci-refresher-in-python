"""Demonstrates selection sort."""

from random import randint
from typing import List


def selection_sort(lst: List[int]) -> List[int]:
    print('starting selection sort for input:', lst)
    for i in range(len(lst)-1):
        print('\n\tcurrent list: {}; processing index {} out of {} (value {})...'.format(lst, i, len(lst) - 1, lst[i]))
      
        # find minimum element in lst[i+1:]
        min_idx = i
        for j in range(i+1, len(lst)):
            print('\t\tcomparing index {} (value {}) to index {} (value {})...'.format(min_idx, lst[min_idx], j, lst[j]))
            if lst[min_idx] > lst[j]:
                min_idx = j
                print('\tsetting index {} (value {}) as new min index...'.format(j, lst[j]))
              
        # swap minimum element with i (could be i itself)
        print('\tswitching indexes {} and {} (values {} and {})...'.format(i, min_idx, lst[i], lst[min_idx]))     
        lst[i], lst[min_idx] = lst[min_idx], lst[i]

    return lst


def main():
    print('Demonstrating selection sort...\n')

    #some_random_list = [8, 1, 5, 3, 9, 12, 6, 7, 3, 9]
    some_random_list = [randint(1, 20) for _ in range(randint(5, 12))]
    selection_sort_output = selection_sort(list(some_random_list))
    print('\n{}\nSelection sort implemented correctly? {}'.format(selection_sort_output, sorted(some_random_list) == selection_sort_output))


if __name__ == '__main__':
    main()

"""
$ python3 datastructures/selection_sort.py
Demonstrating selection sort...

starting selection sort for input: [8, 1, 5, 3, 9, 12, 6, 7, 3, 9]

        current list: [8, 1, 5, 3, 9, 12, 6, 7, 3, 9]; processing index 0 out of 9 (value 8)...
                comparing index 0 (value 8) to index 1 (value 1)...
        setting index 1 as new min index...
                comparing index 1 (value 1) to index 2 (value 5)...
                comparing index 1 (value 1) to index 3 (value 3)...
                comparing index 1 (value 1) to index 4 (value 9)...
                comparing index 1 (value 1) to index 5 (value 12)...
                comparing index 1 (value 1) to index 6 (value 6)...
                comparing index 1 (value 1) to index 7 (value 7)...
                comparing index 1 (value 1) to index 8 (value 3)...
                comparing index 1 (value 1) to index 9 (value 9)...
        switching indexes 0 and 1 (values 8 and 1)...

        current list: [1, 8, 5, 3, 9, 12, 6, 7, 3, 9]; processing index 1 out of 9 (value 8)...
                comparing index 1 (value 8) to index 2 (value 5)...
        setting index 2 as new min index...
                comparing index 2 (value 5) to index 3 (value 3)...
        setting index 3 as new min index...
                comparing index 3 (value 3) to index 4 (value 9)...
                comparing index 3 (value 3) to index 5 (value 12)...
                comparing index 3 (value 3) to index 6 (value 6)...
                comparing index 3 (value 3) to index 7 (value 7)...
                comparing index 3 (value 3) to index 8 (value 3)...
                comparing index 3 (value 3) to index 9 (value 9)...
        switching indexes 1 and 3 (values 8 and 3)...

        current list: [1, 3, 5, 8, 9, 12, 6, 7, 3, 9]; processing index 2 out of 9 (value 5)...
                comparing index 2 (value 5) to index 3 (value 8)...
                comparing index 2 (value 5) to index 4 (value 9)...
                comparing index 2 (value 5) to index 5 (value 12)...
                comparing index 2 (value 5) to index 6 (value 6)...
                comparing index 2 (value 5) to index 7 (value 7)...
                comparing index 2 (value 5) to index 8 (value 3)...
        setting index 8 as new min index...
                comparing index 8 (value 3) to index 9 (value 9)...
        switching indexes 2 and 8 (values 5 and 3)...

        current list: [1, 3, 3, 8, 9, 12, 6, 7, 5, 9]; processing index 3 out of 9 (value 8)...
                comparing index 3 (value 8) to index 4 (value 9)...
                comparing index 3 (value 8) to index 5 (value 12)...
                comparing index 3 (value 8) to index 6 (value 6)...
        setting index 6 as new min index...
                comparing index 6 (value 6) to index 7 (value 7)...
                comparing index 6 (value 6) to index 8 (value 5)...
        setting index 8 as new min index...
                comparing index 8 (value 5) to index 9 (value 9)...
        switching indexes 3 and 8 (values 8 and 5)...

        current list: [1, 3, 3, 5, 9, 12, 6, 7, 8, 9]; processing index 4 out of 9 (value 9)...
                comparing index 4 (value 9) to index 5 (value 12)...
                comparing index 4 (value 9) to index 6 (value 6)...
        setting index 6 as new min index...
                comparing index 6 (value 6) to index 7 (value 7)...
                comparing index 6 (value 6) to index 8 (value 8)...
                comparing index 6 (value 6) to index 9 (value 9)...
        switching indexes 4 and 6 (values 9 and 6)...

        current list: [1, 3, 3, 5, 6, 12, 9, 7, 8, 9]; processing index 5 out of 9 (value 12)...
                comparing index 5 (value 12) to index 6 (value 9)...
        setting index 6 as new min index...
                comparing index 6 (value 9) to index 7 (value 7)...
        setting index 7 as new min index...
                comparing index 7 (value 7) to index 8 (value 8)...
                comparing index 7 (value 7) to index 9 (value 9)...
        switching indexes 5 and 7 (values 12 and 7)...

        current list: [1, 3, 3, 5, 6, 7, 9, 12, 8, 9]; processing index 6 out of 9 (value 9)...
                comparing index 6 (value 9) to index 7 (value 12)...
                comparing index 6 (value 9) to index 8 (value 8)...
        setting index 8 as new min index...
                comparing index 8 (value 8) to index 9 (value 9)...
        switching indexes 6 and 8 (values 9 and 8)...

        current list: [1, 3, 3, 5, 6, 7, 8, 12, 9, 9]; processing index 7 out of 9 (value 12)...
                comparing index 7 (value 12) to index 8 (value 9)...
        setting index 8 as new min index...
                comparing index 8 (value 9) to index 9 (value 9)...
        switching indexes 7 and 8 (values 12 and 9)...

        current list: [1, 3, 3, 5, 6, 7, 8, 9, 12, 9]; processing index 8 out of 9 (value 12)...
                comparing index 8 (value 12) to index 9 (value 9)...
        setting index 9 as new min index...
        switching indexes 8 and 9 (values 12 and 9)...

        current list: [1, 3, 3, 5, 6, 7, 8, 9, 9, 12]; processing index 9 out of 9 (value 12)...
        switching indexes 9 and 9 (values 12 and 12)...

[1, 3, 3, 5, 6, 7, 8, 9, 9, 12]
Selection sort implemented correctly? True
"""
